#!/usr/bin/env python
r"""
Transit and ephemeris calculator
Note: eclipse times are computed without any barycentric corrections
see also https://github.com/nespinoza/exotoolbox/blob/master/exotoolbox/utils.py#L779
"""
from os import makedirs, path
import sys
import time
import datetime as dt
import argparse
from pytz import timezone as tz
import traceback

# from astroquery.exoplanet_orbit_database import ExoplanetOrbitDatabase
import numpy as np
import matplotlib.pyplot as pl
from astroplan import FixedTarget, Observer, EclipsingSystem
from astroplan.plots import plot_airmass
from astroplan import (
    PrimaryEclipseConstraint,
    MoonSeparationConstraint,
    is_event_observable,
    is_always_observable,
    months_observable,
    AtNightConstraint,
    AltitudeConstraint,
    LocalTimeConstraint,
    AirmassConstraint,
)
from astropy.coordinates import SkyCoord, EarthLocation
from astropy.time import Time, TimeDelta
import astropy.units as u

from mirai import (
    parse_target_coord,
    SITES,
    get_tois,
    get_ctois,
    plot_full_transit,
    get_ephem_from_nexsci,
    format_datetime,
    parse_ing_egr,
    parse_ing_egr_list,
    get_t0_per_dur,
)

DEFAULT_BASELINE = 7  # days

if __name__ == "__main__":
    arg = argparse.ArgumentParser(
        description="set-up target and observation settings"
    )
    help = (
        "target name/coord e.g. EPICx/K2x or TIC/TOIx or WASP-x or Gaia DR2x\n"
    )
    help += "or 1:12:43.2, +1:12:43 (hms, dms) or 18.18, 1.21 (deg, deg)"
    arg.add_argument("target", help=help, type=str)
    # arg.add_argument("-ra", help="RA (deg)", type=str)
    # arg.add_argument("-dec", help="Dec (deg)", type=str)
    arg.add_argument(
        "-t0", "--midtransit", help="transit midpoint [JD]", type=float
    )
    arg.add_argument("-per", "--period", help="orbital period [d]", type=float)
    arg.add_argument(
        "-dur", "--duration", help="transit duration [d]", type=float
    )
    arg.add_argument(
        "-n",
        "--next_transit",
        help="only find next full transit",
        action="store_true",
        default=False,
    )
    # arg.add_argument('-e', '--exclude_partial_transit', help='exclude partial transit (default=False)',
    #                  action='store_true', default=False)
    # obs parameters
    arg.add_argument(
        "-dt1",
        "--start_datetime",
        help="start date of observation [UT] e.g. 2019-02-17 21:00 (default=today)",
        nargs=2,
        type=str,
        default=None,
    )
    arg.add_argument(
        "-dt2",
        "--end_datetime",
        help=f"end date of observation [UT] (default=start_date+{DEFAULT_BASELINE} days)",
        type=str,
        nargs=2,
        default=None,
    )
    arg.add_argument(
        "-lt1",
        "--start_localtime",
        help="start time of observation [LT] e.g. 19:00 (default=sunset)",
        type=str,
        default=None,
    )
    arg.add_argument(
        "-lt2",
        "--end_localtime",
        help="end time of observation [LT] (default=sunrise)",
        type=str,
        default=None,
    )
    arg.add_argument(
        "-site",
        "--obs_site_name",
        help=f"observation site name: {list(SITES.keys())} (default OT)",
        type=str,
        default="OT",
    )
    arg.add_argument(
        "-tz", "--timezone", help="time zone", type=str, default="UTC"
    )
    # arg.add_argument('-lt', '--use_local_timezone', help='use local time zone', action='store_true', default=False)
    arg.add_argument(
        "-lat",
        "--site_lat",
        help="custom site latitude [deg]",
        type=float,
        default=None,
    )
    arg.add_argument(
        "-lon",
        "--site_lon",
        help="custom site longitude [deg]",
        type=float,
        default=None,
    )
    arg.add_argument(
        "-elev",
        "--site_elev",
        help="custom site elevation [m]",
        type=float,
        default=None,
    )
    # constraints
    arg.add_argument(
        "-alt",
        "--alt_limit",
        help="target altitude limit [deg]",
        type=float,
        default=30,
    )
    arg.add_argument(
        "-sep",
        "--min_moon_sep",
        help="moon separation limit [deg]",
        type=float,
        default=10,
    )
    # miscellaneous
    arg.add_argument(
        "-p",
        "--plot_target",
        help="plot airmass and altitude of target on first observable date",
        action="store_true",
        default=False,
    )
    arg.add_argument(
        "-s",
        "--save",
        help="save visibility plots and transit predictions in a csv file",
        action="store_true",
        default=False,
    )
    arg.add_argument(
        "-c", "--clobber", help="clobber", action="store_true", default=False
    )
    arg.add_argument(
        "-v",
        "--verbose",
        help="print details",
        action="store_true",
        default=False,
    )
    arg.add_argument(
        "--show_site_names",
        help="print accepted site_names",
        action="store_true",
        default=False,
    )
    arg.add_argument(
        "-o", "--outdir", help="output directory", type=str, default=None
    )

    args = arg.parse_args()
    if args.show_site_names:
        # TODO: add this to SITES
        print(EarthLocation.get_site_names())

    else:
        target = args.target.lower().strip().replace("-", "")
        target_coord = parse_target_coord(target)
        # use target name as name of output directory
        outdir = args.outdir if args.outdir is not None else target

        # obs params
        if args.start_datetime is None:
            obs_start = Time.now()
        else:
            obs_start = Time(" ".join(args.start_datetime))
        if args.end_datetime is None:
            if args.next_transit:
                # next transit 2 years from obs_start
                obs_end = obs_start + TimeDelta(365, format="jd")
                long_search = True
            else:
                # 1 month
                obs_end = obs_start + TimeDelta(DEFAULT_BASELINE, format="jd")
                long_search = False
        else:
            obs_end = Time(" ".join(args.end_datetime))
            long_search = False
        baseline = obs_end.jd - obs_start.jd
        if baseline < 30:
            ntransits = 100
        elif baseline < 30 * 6:
            ntransits = 500
        elif baseline < 30 * 12:
            ntransits = 1000
        elif baseline < 30 * 18:
            ntransits = 1500
        else:
            errmsg = "Set prediction window shorter than 1 year"
            raise ValueError(errmsg)

        site_name = args.obs_site_name.upper()
        timezone = args.timezone

        try:
            # observatory site
            if site_name is not None:
                all_sites = list(SITES.keys())
                # TODO: add LCO in sites using EarthLocation
                assert site_name in all_sites, f"-site={all_sites}"
                lat, lon, elev, timezone = SITES[site_name]
            elif (
                (lat is not None)
                & (lon is not None)
                & (elev is not None)
                & (timezone is not None)
            ):
                lat = args.site_lat
                lon = args.site_lon
                elev = args.site_elev
            else:
                # default: Observatorio del Teide
                lat, lon, elev, timezone = SITES["OT"]
            obs_site = Observer(
                latitude=lat * u.deg,
                longitude=lon * u.deg,
                elevation=elev * u.m,
                name=site_name,
                timezone=timezone,
            )

            # observation constraints
            utc_offset = (
                tz(timezone).localize(obs_start.datetime).strftime("%z")
            )

            if args.verbose:
                print(
                    f"Target: {target} | ra, dec=({target_coord.to_string()})"
                )
                print(
                    f"Site: {obs_site.name} ({lat}d, {lon}d, {elev}m, UT{utc_offset[:3]})"
                )

            # see https://astroplan.readthedocs.io/en/latest/tutorials/constraints.html
            constraints = [
                AtNightConstraint.twilight_civil(),  # between sunset and sunrise
                AltitudeConstraint(min=args.alt_limit * u.deg),
                MoonSeparationConstraint(min=args.min_moon_sep * u.deg),
            ]
            if (args.start_localtime is not None) | (
                args.end_localtime is not None
            ):
                # useful for selecting first half or second half nights
                if baseline > 31:
                    print(
                        f"Fixing local time may be inaccurate after {baseline} days"
                    )
                if args.start_localtime is not None:
                    hr, min = args.start_localtime.split(":")
                    min_lt = dt.time(int(hr), int(min))
                else:
                    min_lt = obs_site.sun_set_time(obs_start).datetime.time()
                if args.end_localtime is not None:
                    hr, min = args.end_localtime.split(":")
                    max_lt = dt.time(int(hr), int(min))
                else:
                    # TODO: is sun_rise_time on obs_start accurate?
                    max_lt = obs_site.sun_rise_time(obs_start).datetime.time()
                constraints.append(LocalTimeConstraint(min=min_lt, max=max_lt))

            # set-up transit parameters
            if (
                (args.midtransit is not None)
                & (args.period is not None)
                & (args.duration is not None)
            ):
                t0, per, dur = args.midtransit, args.period, args.duration
            else:
                t0, per, dur = get_t0_per_dur(target)

            ephem_label = f"t0={t0:.4f} JD, "
            ephem_label += f"P={per:.4f} d, "
            ephem_label += f"dur={dur*24:.2f} hr\n"
            if args.verbose:
                print(ephem_label)

            primary_eclipse_time = Time(t0, format="jd")
            orbital_period = per * u.day
            transit_duration = dur * u.day

            primary_eclipse_time = Time(t0, format="jd", scale="tdb")
            system = EclipsingSystem(
                primary_eclipse_time=primary_eclipse_time,
                orbital_period=orbital_period,
                duration=transit_duration,
                name=target,
            )

            midtransit_times = system.next_primary_eclipse_time(
                obs_start,
                n_eclipses=ntransits,  # TODO 100 if args.next_transit else ntransits
            )
            transits_after_obs_end = sum(midtransit_times > obs_end)
            assert transits_after_obs_end > 5, "set -dt2 longer"  # arbitrary
            # assert transits_after_obs_end < 100, "set -dt2 shorter" #TODO: use for optimization
            midtransit_times = midtransit_times[midtransit_times < obs_end]
            # is event observable during midtransit?
            idx2 = is_event_observable(
                constraints, obs_site, target_coord, times=midtransit_times
            )[0]
            midtransit_times = midtransit_times[idx2]
            nevents_partial = sum(idx2)
            if nevents_partial > 0:
                # make sure mid-transit happens at night
                assert np.all(obs_site.is_night(midtransit_times.flatten()))
                partial = midtransit_times
            else:
                partial = []
            # is event observable during ingres and egress?
            ing_egr_times = system.next_primary_ingress_egress_time(
                obs_start, n_eclipses=ntransits
            )
            ing_egr_times = ing_egr_times[ing_egr_times[:, 1] < obs_end]
            idx3 = is_event_observable(
                constraints,
                obs_site,
                target_coord,
                times_ingress_egress=ing_egr_times,
            )[0]
            ing_egr_times = ing_egr_times[idx3]
            nevents_full = sum(idx3)
            if nevents_full > 0:
                # make sure full transit happens at night
                assert np.all(obs_site.is_night(ing_egr_times.flatten()))
                if not args.next_transit:
                    print(f"{target} has {nevents_full} full transits")
                full = ing_egr_times
            else:
                full = []

            d1 = format_datetime(obs_start.datetime)
            d2 = format_datetime(obs_end.datetime)
            if len(full) > 0:
                # first transit
                ing, mid, egr = parse_ing_egr(full[0])
                d0 = format_datetime(mid.datetime)
                if args.next_transit:
                    print(
                        f"Next full transit of {target} from {site_name} is on {mid.tdb.iso} UT (midpoint)."
                    )
                else:
                    print(f"{len(full)} full transit between {d1} & {d2}.")
            else:
                if args.next_transit & long_search:
                    errmsg = f"{target} ra,deg=({target_coord.to_string()}) is likely not observable from {site_name}."
                else:
                    errmsg = f"No full transit between {d1} & {d2} UT."
                raise ValueError(errmsg)

            if args.plot_target:
                # plot only first transit
                print("Showing the first transit")
                ing_egr = full[0]
                fig = plot_full_transit(
                    ing_egr,
                    target_coord,
                    obs_site,
                    name=target,
                    ephem_label=ephem_label,
                )
                pl.show()

            if args.save:
                # save all figures
                if not path.exists(outdir):
                    makedirs(outdir)

                if args.next_transit | (len(full) == 1):
                    # save only one
                    ing_egr = full[0]
                    fp1 = path.join(
                        outdir, f"{target}_{obs_site.name}_{d0}.png"
                    )
                    fig = plot_full_transit(
                        ing_egr, target_coord, obs_site, name=target
                    )
                    fig.savefig(fp1, bbox_inches="tight")
                    if args.verbose:
                        print(f"Saved: {fp1}")
                else:
                    if len(full) > 1:
                        # save each figure
                        for ing_egr in full:
                            ing, mid, egr = parse_ing_egr(ing_egr)
                            d = format_datetime(mid.datetime)
                            fp1 = path.join(
                                outdir, f"{target}_{obs_site.name}_{d}.png"
                            )
                            fig = plot_full_transit(
                                ing_egr, target_coord, obs_site, name=target
                            )
                            fig.savefig(fp1, bbox_inches="tight")
                            if args.verbose:
                                print(f"Saved: {fp1}")
                # save predictions to 1 csv file
                if args.next_transit | len(full) == 1:
                    # if 1 event, use transit midpoint
                    fp2 = path.join(
                        outdir, f"{target}_{obs_site.name}_{d0}.csv"
                    )
                else:
                    # if more, use transit query dates
                    fp2 = path.join(
                        outdir, f"{target}_{obs_site.name}_{d1}_{d2}.csv"
                    )
                np.savetxt(
                    fp2, parse_ing_egr_list(full), delimiter=",", fmt="%s"
                )
                if args.verbose:
                    print(f"Saved: {fp2}")
        except Exception:
            # Get current system exception
            ex_type, ex_value, ex_traceback = sys.exc_info()
            # Extract unformatter stack traces as tuples
            trace_back = traceback.extract_tb(ex_traceback)

            print(f"Exception type: {ex_type.__name__}")
            print(f"Exception message: {ex_value}")
            # Format stacktrace
            for trace in trace_back:
                print(f"File : {trace[0]}")
                print(f"Line : {trace[1]}")
                print(f"Func : {trace[2]}")
                print(f"Message : {trace[3]}\n\n")
